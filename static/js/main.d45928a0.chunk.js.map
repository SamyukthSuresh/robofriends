{"version":3,"sources":["component/Card.js","component/CardList.js","component/Scroll.js","component/SearchBox.js","component/ErrorBoundary.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4LAaeA,G,MAXJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACvB,OACC,yBAAKC,UAAU,kDACd,yBAAKC,IAAI,SAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACC,4BAAKF,GACL,2BAAIC,O,4BCYOK,G,MAlBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAClB,OACA,6BAECA,EAAOC,KAAK,SAACC,EAAKC,GACjB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAQM,EAAOG,GAAGT,cCHPW,EAPF,SAACC,GACZ,OACC,yBAAKC,MAAO,CAAEC,UAAY,SAAWC,OAAO,kBAAoBC,OAAO,UACrEJ,EAAMK,WCOIC,EAVG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC/B,OACC,yBAAKlB,UAAU,OACf,2BACCA,UAAY,mCACZmB,KAAK,SAASC,YAAY,gBACzBC,SAAUH,MCWEI,E,kDAjBd,WAAYZ,GAAO,IAAD,8BACjB,cAAMA,IACDa,MAAO,CACXC,UAAW,GAHK,E,8DAOAC,EAAMC,GACtBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAGG,KAAKJ,MAAMC,SACN,wDAEDG,KAAKjB,MAAMK,a,GAfOc,aC4CdC,E,kDAnCd,aAAc,IAAD,8BACZ,gBAaDC,eAAgB,SAACC,GAChB,EAAKJ,SAAS,CAACX,YAAYe,EAAMC,OAAOC,SAbxC,EAAKX,MAAM,CACVnB,OAAO,GACPa,YAAY,KAJD,E,gEAOO,IAAD,OAClBkB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKX,SAAS,CAACxB,OAAOmC,S,+BAQ5B,IAAD,OACAC,EAAeb,KAAKJ,MAAMnB,OAAOqC,QAAO,SAACC,GAC/C,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS,EAAKrB,MAAMN,YAAY0B,kBAEjE,OACA,yBAAK3C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWkB,aAAcS,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQoC,W,GA7BLK,IAAMhB,W,MCGJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.d45928a0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=({name,email,id})=>{\r\n\treturn( \r\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow shadow - 5\">\r\n\t\t\t<img alt='robots'src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\t);\r\n}\r\nexport default Card;","import React from'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots})=>{\r\n\treturn(\r\n\t<div>\r\n\t\t{\r\n\t\trobots.map( (user,i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Card \r\n\t\t\t\tkey={i} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={ robots[i].email}\r\n\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\t\t\r\n  \t</div>\r\n  );\t\t\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\t\treturn(\r\n\t\t\t<div style={{ overflowY : 'scroll' , border:'1px solid black' , height:'600px'}}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t\t);\r\n}\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input\r\n\t\t className = \"pa3 ba b--green bg-lightest-blue\"\r\n\t\t type='search' placeholder='Search Robots' \r\n\t\t  onChange={searchChange}/>\r\n\t\t </div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React , {Component} from 'react';\r\n class ErrorBoundary extends Component{\r\n \tconstructor(props){\r\n \t\tsuper(props);\r\n \t\tthis.state= {\r\n \t\t\thasError : false\r\n \t\t}\r\n \t}\r\n\r\n \tcomponentDidCatch(error,info){\r\n \t\t\tthis.setState({hasError:true})\r\n \t}\r\n \trender(){\r\n \t\t\tif(this.state.hasError){\r\n \t\t\t\treturn <h1>Ooooops.That is not Good</h1>\r\n \t\t\t}\r\n \t\t\treturn this.props.children\r\n \t}\r\n }\r\n export default ErrorBoundary;","import React from 'react';\r\nimport './App.css';\r\nimport CardList from '../component/CardList';\r\nimport Scroll from '../component/Scroll'\r\nimport SearchBox from '../component/SearchBox';\r\nimport { robots } from '../robots';\r\nimport ErrorBoundary from '../component/ErrorBoundary'\r\n//State: Description of your app.\r\n\r\nclass App extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\trobots:[],\r\n\t\t\tsearchfield:' '\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t.then(response =>response.json())\r\n\t\t.then(users =>this.setState({robots:users}));\r\n\t\t\r\n\t}\r\n\r\n\tonSearchChange= (event) =>{\r\n\t\tthis.setState({searchfield:event.target.value});\r\n\t\t}\r\n\r\n\trender(){\r\n\t\t\tconst filteredRobots=this.state.robots.filter((robot) =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\treturn(\r\n\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './component/Card.js';\nimport App from './container/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';// Advance Topic :USED FOR MAKING OFFLINE APPS\n \nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}